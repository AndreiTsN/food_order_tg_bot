from aiogram import Router, Bot
from aiogram import F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from app.services.google_sheets import save_order_to_sheet
from app.services.menu_loader import get_menu_items, get_price_by_name, load_menu
from app.handlers.menu import show_menu
from app.config import ADMIN_CHANNEL_ID
import logging


logger = logging.getLogger(__name__)

order_router = Router()

class OrderFood(StatesGroup):
    waiting_for_item = State()
    showing_item_info = State()
    waiting_for_quantity = State()
    waiting_for_continue = State()
    waiting_for_contact = State()

def menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=item)] for item in get_menu_items()],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def continue_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë")],
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )


@order_router.message(Command("order"))
async def start_order(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –º–µ–Ω—é:", reply_markup=menu_keyboard())
    await state.set_state(OrderFood.waiting_for_item)
    await state.update_data(order=[])

@order_router.message(OrderFood.waiting_for_item)
async def show_item_info(message: Message, state: FSMContext):
    item = message.text
    if item not in get_menu_items():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –º–µ–Ω—é üëá", reply_markup=menu_keyboard())
        return

    menu = load_menu()
    item_data = next((i for i in menu if i["name"] == item), None)
    description = item_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.") if item_data else "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    await state.update_data(current_item=item)

    await message.answer(
        f"üçΩ *{item}*\n\n_{description}_",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        ),
        parse_mode="Markdown"
    )

    await state.set_state(OrderFood.showing_item_info)

@order_router.message(OrderFood.showing_item_info)
async def handle_add_or_back(message: Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑":
        await message.answer("–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫?")
        await state.set_state(OrderFood.waiting_for_quantity)
    elif text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –º–µ–Ω—é:", reply_markup=menu_keyboard())
        await state.set_state(OrderFood.waiting_for_item)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑¬ª –∏–ª–∏ ¬´üîô –ù–∞–∑–∞–¥¬ª.")

@order_router.message(OrderFood.waiting_for_quantity)
async def get_quantity(message: Message, state: FSMContext):
    logger.info(f"üî¢ –í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {message.text!r}")

    data = await state.get_data()
    item = data["current_item"]
    quantity = message.text.strip()

    if not quantity.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2)")
        return

    order = data.get("order", [])
    order.append({"item": item, "quantity": quantity})
    await state.update_data(order=order)

    summary_lines = []
    total_price = 0
    for o in order:
        name = o["item"]
        qty = int(o["quantity"])
        price = get_price_by_name(name)
        line_total = qty * price
        total_price += line_total
        summary_lines.append(f"{name} √ó {qty} = {line_total}zl")

    summary_text = "\n".join(summary_lines)

    await message.answer(
        f"‚úÖ –ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {item} √ó {quantity}\n\n"
        f"üßæ –í–∞—à –∑–∞–∫–∞–∑ —Å–µ–π—á–∞—Å:\n"
        f"{summary_text}\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_price}zl\n\n"
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å?",
        reply_markup=continue_keyboard()
    )
    await state.set_state(OrderFood.waiting_for_continue)

@order_router.message(OrderFood.waiting_for_continue)
async def continue_or_finish(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª: {message.text!r}")
    text = message.text.strip().lower()

    if text in ["–¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "–¥–æ–±–∞–≤–∏—Ç—å", "–µ—â—ë", "‚ûï –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ:", reply_markup=menu_keyboard())
        await state.set_state(OrderFood.waiting_for_item)
    elif text in ["–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–∑–∞–∫–∞–∑"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω:")
        await state.set_state(OrderFood.waiting_for_contact)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: ¬´–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë¬ª –∏–ª–∏ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑¬ª",
            reply_markup=continue_keyboard()
        )

@order_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /order.")


@order_router.message(OrderFood.waiting_for_contact)
async def get_contact(message: Message, state: FSMContext, bot: Bot):
    logger.info(f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text!r}")

    data = await state.get_data()
    order = data.get("order", [])
    contact = message.text

    order_lines = []
    total_price = 0
    for unit in order:
        item = unit["item"]
        quantity = int(unit["quantity"])
        price = get_price_by_name(item)
        line_total = quantity * price
        total_price += line_total
        order_lines.append(f"{item} √ó {quantity} = {line_total}zl")

    order_text = "\n".join(order_lines)

    await message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n"
        f"{order_text}\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_price}zl\n\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n\n"
        f"–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!"
    )
    await state.clear()

    save_order_to_sheet(order, total_price, contact)

    await bot.send_message(
        chat_id=ADMIN_CHANNEL_ID,
        text=(
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
            f"{order_text}\n"
            f"üí∞ –°—É–º–º–∞: {total_price}zl\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
        ),
        parse_mode="Markdown"
    )

    await show_menu(message)
