from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message
from datetime import datetime, timedelta
from app.services.google_sheets import get_all_orders, summarize_orders_for_range
from app.services.google_sheets import save_summary_to_sheet
from app.services.google_sheets import save_ingredients_summary
from app.config import SUMMARY_ADMINS
from app.config import ADMIN_CHANNEL_ID as CHANNEL_ID
from app.config import GOOGLE_SHEET_URL as SHEET_URL
import logging


logger = logging.getLogger(__name__)

summary_router = Router()

@summary_router.message(Command("summary"))
async def summary_handler(message: Message, bot: Bot):
    if message.from_user.id not in SUMMARY_ADMINS:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    args = message.text.strip().split()
    if len(args) == 1:
        days = 1  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å–µ–≥–æ–¥–Ω—è
    elif len(args) == 2 and args[1].isdigit():
        days = int(args[1])
    elif len(args) == 2 and ":" in args[1]:
        try:
            start_str, end_str = args[1].split(":")
            start = datetime.strptime(start_str, "%Y-%m-%d").date()
            end = datetime.strptime(end_str, "%Y-%m-%d").date()
        except:
            return await bot.send_message(CHANNEL_ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç.")
    else:
        return await bot.send_message(CHANNEL_ID,
                                      "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/summary`, `/summary 3` –∏–ª–∏ `/summary 2025-04-10:2025-04-13`")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    orders = get_all_orders()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã
    if "start" not in locals():
        end = datetime.now().date()
        start = end - timedelta(days=days-1)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º
    summary, total = summarize_orders_for_range(orders, start, end)

    if not summary:
        return await bot.send_message(CHANNEL_ID, f"üìÖ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å {start} –ø–æ {end}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç
    save_summary_to_sheet(summary, total, start, end)
    save_ingredients_summary(summary)  # –î–û–ë–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã

    # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
    summary_lines = [f"{item} ‚Äî {qty} —à—Ç" for item, qty in summary.items()]
    period_str = f"{start.strftime('%d.%m')}‚Äì{end.strftime('%d.%m')}" if start != end else f"{start.strftime('%d.%m')}"
    report = (
            f"üßæ –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ {period_str}:\n\n" +
            "\n".join(summary_lines) +
            f"\n\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total}zl"+
            f"\n\nüìÑ [–û—Ç–∫—Ä—ã—Ç—å Google Sheet]({SHEET_URL})"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
    await bot.send_message(CHANNEL_ID, report, parse_mode="Markdown")
